#!/bin/bash

# This script monitors the CORE_DUMP_DIR directory (set in the Makefile)
# and when new files are added it pops up a red notification and attempts
# to use GDB to produce a stack trace.

set -euo pipefail

if [[ $* == *-j* ]]; then
    echo '{
  "desc": "Livepeer-packaged core dump monitor",
  "name": "Livepeer core dump monitor",
  "optional": {}
}'
    exit 0
fi

DIR="$CORE_DUMP_DIR"

logOfChanges="/tmp/changes.log.csv" # Set your file name here.

function echored() {
  echo -e "\033[31;1;4m${1}\033[0m"
}

function printdump() {
  entry="$1"
  echored "==========================================================="
  echo "thread apply all bt" > /tmp/backtrace.gdb
  dumppath="$DIR/$entry"
  binary=$(basename $(file $dumppath | sed -r -e "s#.*execfn: '([^\']+)'.*#\1#"))
  echored "SEGFAULT DETECTED IN $binary"
  echored "CORE DUMPED TO $dumppath"
  echored "==========================================================="
  gdb --batch --command=/tmp/backtrace.gdb $binary $dumppath
}

inotifywait -e CLOSE_WRITE -mq --format "%f" $DIR | while read entry; do
  printdump "$entry" || echo "failed to handle $entry"
done
